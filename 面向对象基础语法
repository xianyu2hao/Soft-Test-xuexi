# dir 内置函数
# 定义简单的类
# 方法中的 self 函数
# 初始化方法

# 定义 类 模板
class Person:
    def run(self):
        print("--->跑<---")
    def eat(self,food):
        print("---><---",food)
    def sleep(self):
        print(">>睡觉<<")
# 根据类创建对象
# 对象变量 = 类名（）
xiaozhang = Person()
# 通过对象调用方法；格式：对象变量名.方法名（）：self参数不需要我们传递
xiaozhang.run()
xiaozhang.eat("蛋糕")

# 类 可以封装函数，比函数更大的封装；面向对象的三大特性之一是封装

# Cat
# eat
# drink
# 定义 类 模板
class Cat:
    """猫类"""
    def eat(self):
        """吃方法"""
        print("__小猫爱吃鱼__",self)
    def drink(self):
        """喝方法"""
        print("__小猫想喝水__",self)

# 使用 类 创建对象
# 对象变量= 类名（）
Tom = Cat()
# 调用 格式：对象名.方法名（参数）
Tom.eat()
print("_"*30)

Bai = Cat()
Bai.drink()
# 同一个类 创建的不同的对象，那么对象也储存在不同的物理地址，由self参数可知；然后使用的是引用地址。

'''
#创建类模板且内部添加属性
class Cat:
    """猫类"""
    def _init_(self):
        """初始化方法"""
        print("初始化的数据在这！")
        self.name ="汤姆猫"  # 此处是内部添加的属性,格式：self.属性名 = 属性值
        print("类模板中初始化后自动调用")
    def eat(self):
        print("%s吃方法"% self.name)

# 使用模板创建对象
tom = Cat()
# 访问属性
print(tom.name)
tom.eat()
print("_"*35)
# 由类创建对象2
bosimao = Cat()
# 访问属性
print(bosimao.name)
bosimao.eat()

''' # 上述方法将属性名固定了，故需要改造

# 初始化同时设置属性值
# 定义模板
class Cat:
    def __init__(self, new_name):
        self.name = new_name
    def eat(self):
        print("  %s爱吃小鱼干"% self.name)

# 创建对象1
tom = Cat("汤姆猫")
tom.eat()
# 创建对象2
bosimao = Cat("波斯猫")
bosimao.eat()
